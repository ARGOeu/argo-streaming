/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package argo.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MetricProfile extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MetricProfile\",\"namespace\":\"argo.avro\",\"fields\":[{\"name\":\"date\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"profile\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"service\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"metric\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tags\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String date;
  @Deprecated public java.lang.String profile;
  @Deprecated public java.lang.String service;
  @Deprecated public java.lang.String metric;
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> tags;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public MetricProfile() {}

  /**
   * All-args constructor.
   */
  public MetricProfile(java.lang.String date, java.lang.String profile, java.lang.String service, java.lang.String metric, java.util.Map<java.lang.String,java.lang.String> tags) {
    this.date = date;
    this.profile = profile;
    this.service = service;
    this.metric = metric;
    this.tags = tags;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return date;
    case 1: return profile;
    case 2: return service;
    case 3: return metric;
    case 4: return tags;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: date = (java.lang.String)value$; break;
    case 1: profile = (java.lang.String)value$; break;
    case 2: service = (java.lang.String)value$; break;
    case 3: metric = (java.lang.String)value$; break;
    case 4: tags = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'date' field.
   */
  public java.lang.String getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.String value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'profile' field.
   */
  public java.lang.String getProfile() {
    return profile;
  }

  /**
   * Sets the value of the 'profile' field.
   * @param value the value to set.
   */
  public void setProfile(java.lang.String value) {
    this.profile = value;
  }

  /**
   * Gets the value of the 'service' field.
   */
  public java.lang.String getService() {
    return service;
  }

  /**
   * Sets the value of the 'service' field.
   * @param value the value to set.
   */
  public void setService(java.lang.String value) {
    this.service = value;
  }

  /**
   * Gets the value of the 'metric' field.
   */
  public java.lang.String getMetric() {
    return metric;
  }

  /**
   * Sets the value of the 'metric' field.
   * @param value the value to set.
   */
  public void setMetric(java.lang.String value) {
    this.metric = value;
  }

  /**
   * Gets the value of the 'tags' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getTags() {
    return tags;
  }

  /**
   * Sets the value of the 'tags' field.
   * @param value the value to set.
   */
  public void setTags(java.util.Map<java.lang.String,java.lang.String> value) {
    this.tags = value;
  }

  /** Creates a new MetricProfile RecordBuilder */
  public static argo.avro.MetricProfile.Builder newBuilder() {
    return new argo.avro.MetricProfile.Builder();
  }
  
  /** Creates a new MetricProfile RecordBuilder by copying an existing Builder */
  public static argo.avro.MetricProfile.Builder newBuilder(argo.avro.MetricProfile.Builder other) {
    return new argo.avro.MetricProfile.Builder(other);
  }
  
  /** Creates a new MetricProfile RecordBuilder by copying an existing MetricProfile instance */
  public static argo.avro.MetricProfile.Builder newBuilder(argo.avro.MetricProfile other) {
    return new argo.avro.MetricProfile.Builder(other);
  }
  
  /**
   * RecordBuilder for MetricProfile instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MetricProfile>
    implements org.apache.avro.data.RecordBuilder<MetricProfile> {

    private java.lang.String date;
    private java.lang.String profile;
    private java.lang.String service;
    private java.lang.String metric;
    private java.util.Map<java.lang.String,java.lang.String> tags;

    /** Creates a new Builder */
    private Builder() {
      super(argo.avro.MetricProfile.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(argo.avro.MetricProfile.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.profile)) {
        this.profile = data().deepCopy(fields()[1].schema(), other.profile);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.service)) {
        this.service = data().deepCopy(fields()[2].schema(), other.service);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.metric)) {
        this.metric = data().deepCopy(fields()[3].schema(), other.metric);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tags)) {
        this.tags = data().deepCopy(fields()[4].schema(), other.tags);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing MetricProfile instance */
    private Builder(argo.avro.MetricProfile other) {
            super(argo.avro.MetricProfile.SCHEMA$);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.profile)) {
        this.profile = data().deepCopy(fields()[1].schema(), other.profile);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.service)) {
        this.service = data().deepCopy(fields()[2].schema(), other.service);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.metric)) {
        this.metric = data().deepCopy(fields()[3].schema(), other.metric);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tags)) {
        this.tags = data().deepCopy(fields()[4].schema(), other.tags);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'date' field */
    public java.lang.String getDate() {
      return date;
    }
    
    /** Sets the value of the 'date' field */
    public argo.avro.MetricProfile.Builder setDate(java.lang.String value) {
      validate(fields()[0], value);
      this.date = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'date' field has been set */
    public boolean hasDate() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'date' field */
    public argo.avro.MetricProfile.Builder clearDate() {
      date = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'profile' field */
    public java.lang.String getProfile() {
      return profile;
    }
    
    /** Sets the value of the 'profile' field */
    public argo.avro.MetricProfile.Builder setProfile(java.lang.String value) {
      validate(fields()[1], value);
      this.profile = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'profile' field has been set */
    public boolean hasProfile() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'profile' field */
    public argo.avro.MetricProfile.Builder clearProfile() {
      profile = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'service' field */
    public java.lang.String getService() {
      return service;
    }
    
    /** Sets the value of the 'service' field */
    public argo.avro.MetricProfile.Builder setService(java.lang.String value) {
      validate(fields()[2], value);
      this.service = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'service' field has been set */
    public boolean hasService() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'service' field */
    public argo.avro.MetricProfile.Builder clearService() {
      service = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'metric' field */
    public java.lang.String getMetric() {
      return metric;
    }
    
    /** Sets the value of the 'metric' field */
    public argo.avro.MetricProfile.Builder setMetric(java.lang.String value) {
      validate(fields()[3], value);
      this.metric = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'metric' field has been set */
    public boolean hasMetric() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'metric' field */
    public argo.avro.MetricProfile.Builder clearMetric() {
      metric = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'tags' field */
    public java.util.Map<java.lang.String,java.lang.String> getTags() {
      return tags;
    }
    
    /** Sets the value of the 'tags' field */
    public argo.avro.MetricProfile.Builder setTags(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[4], value);
      this.tags = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'tags' field has been set */
    public boolean hasTags() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'tags' field */
    public argo.avro.MetricProfile.Builder clearTags() {
      tags = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public MetricProfile build() {
      try {
        MetricProfile record = new MetricProfile();
        record.date = fieldSetFlags()[0] ? this.date : (java.lang.String) defaultValue(fields()[0]);
        record.profile = fieldSetFlags()[1] ? this.profile : (java.lang.String) defaultValue(fields()[1]);
        record.service = fieldSetFlags()[2] ? this.service : (java.lang.String) defaultValue(fields()[2]);
        record.metric = fieldSetFlags()[3] ? this.metric : (java.lang.String) defaultValue(fields()[3]);
        record.tags = fieldSetFlags()[4] ? this.tags : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
