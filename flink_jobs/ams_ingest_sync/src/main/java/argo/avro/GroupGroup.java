/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package argo.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class GroupGroup extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GroupGroup\",\"namespace\":\"argo.avro\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"group\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"subgroup\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tags\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String type;
  @Deprecated public java.lang.String group;
  @Deprecated public java.lang.String subgroup;
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> tags;

  /**
   * Default constructor.
   */
  public GroupGroup() {}

  /**
   * All-args constructor.
   */
  public GroupGroup(java.lang.String type, java.lang.String group, java.lang.String subgroup, java.util.Map<java.lang.String,java.lang.String> tags) {
    this.type = type;
    this.group = group;
    this.subgroup = subgroup;
    this.tags = tags;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return group;
    case 2: return subgroup;
    case 3: return tags;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (java.lang.String)value$; break;
    case 1: group = (java.lang.String)value$; break;
    case 2: subgroup = (java.lang.String)value$; break;
    case 3: tags = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'group' field.
   */
  public java.lang.String getGroup() {
    return group;
  }

  /**
   * Sets the value of the 'group' field.
   * @param value the value to set.
   */
  public void setGroup(java.lang.String value) {
    this.group = value;
  }

  /**
   * Gets the value of the 'subgroup' field.
   */
  public java.lang.String getSubgroup() {
    return subgroup;
  }

  /**
   * Sets the value of the 'subgroup' field.
   * @param value the value to set.
   */
  public void setSubgroup(java.lang.String value) {
    this.subgroup = value;
  }

  /**
   * Gets the value of the 'tags' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getTags() {
    return tags;
  }

  /**
   * Sets the value of the 'tags' field.
   * @param value the value to set.
   */
  public void setTags(java.util.Map<java.lang.String,java.lang.String> value) {
    this.tags = value;
  }

  /** Creates a new GroupGroup RecordBuilder */
  public static argo.avro.GroupGroup.Builder newBuilder() {
    return new argo.avro.GroupGroup.Builder();
  }
  
  /** Creates a new GroupGroup RecordBuilder by copying an existing Builder */
  public static argo.avro.GroupGroup.Builder newBuilder(argo.avro.GroupGroup.Builder other) {
    return new argo.avro.GroupGroup.Builder(other);
  }
  
  /** Creates a new GroupGroup RecordBuilder by copying an existing GroupGroup instance */
  public static argo.avro.GroupGroup.Builder newBuilder(argo.avro.GroupGroup other) {
    return new argo.avro.GroupGroup.Builder(other);
  }
  
  /**
   * RecordBuilder for GroupGroup instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GroupGroup>
    implements org.apache.avro.data.RecordBuilder<GroupGroup> {

    private java.lang.String type;
    private java.lang.String group;
    private java.lang.String subgroup;
    private java.util.Map<java.lang.String,java.lang.String> tags;

    /** Creates a new Builder */
    private Builder() {
      super(argo.avro.GroupGroup.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(argo.avro.GroupGroup.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing GroupGroup instance */
    private Builder(argo.avro.GroupGroup other) {
            super(argo.avro.GroupGroup.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.group)) {
        this.group = data().deepCopy(fields()[1].schema(), other.group);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subgroup)) {
        this.subgroup = data().deepCopy(fields()[2].schema(), other.subgroup);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tags)) {
        this.tags = data().deepCopy(fields()[3].schema(), other.tags);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public java.lang.String getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public argo.avro.GroupGroup.Builder setType(java.lang.String value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'type' field */
    public argo.avro.GroupGroup.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'group' field */
    public java.lang.String getGroup() {
      return group;
    }
    
    /** Sets the value of the 'group' field */
    public argo.avro.GroupGroup.Builder setGroup(java.lang.String value) {
      validate(fields()[1], value);
      this.group = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'group' field has been set */
    public boolean hasGroup() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'group' field */
    public argo.avro.GroupGroup.Builder clearGroup() {
      group = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'subgroup' field */
    public java.lang.String getSubgroup() {
      return subgroup;
    }
    
    /** Sets the value of the 'subgroup' field */
    public argo.avro.GroupGroup.Builder setSubgroup(java.lang.String value) {
      validate(fields()[2], value);
      this.subgroup = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'subgroup' field has been set */
    public boolean hasSubgroup() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'subgroup' field */
    public argo.avro.GroupGroup.Builder clearSubgroup() {
      subgroup = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'tags' field */
    public java.util.Map<java.lang.String,java.lang.String> getTags() {
      return tags;
    }
    
    /** Sets the value of the 'tags' field */
    public argo.avro.GroupGroup.Builder setTags(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[3], value);
      this.tags = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'tags' field has been set */
    public boolean hasTags() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'tags' field */
    public argo.avro.GroupGroup.Builder clearTags() {
      tags = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public GroupGroup build() {
      try {
        GroupGroup record = new GroupGroup();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.String) defaultValue(fields()[0]);
        record.group = fieldSetFlags()[1] ? this.group : (java.lang.String) defaultValue(fields()[1]);
        record.subgroup = fieldSetFlags()[2] ? this.subgroup : (java.lang.String) defaultValue(fields()[2]);
        record.tags = fieldSetFlags()[3] ? this.tags : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
